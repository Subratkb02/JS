A function declaration consists of:
- The function keyword.
- The name of the function, or its identifier, followed by parentheses.
- A function body, or the block of statements required to perform a specific task, enclosed in the function’s curly brackets, { }.

greetWorld(); // Output: Hello, World!(Hoisting)

function greetWorld() {
  console.log('Hello, World!');
}

To call a function in your code, you type the function name followed by parentheses.
Default parameters allow parameters to have a predetermined value in case there is no argument passed into the function or if the argument is undefined when called


Helper functions:
  These functions being called within another function are often referred to as helper functions. Since each function is carrying out a specific task, it makes our code easier to read and debug if necessary.

To define a function inside an expression, we can use the function keyword. In a function expression, the function name is usually omitted. A function with no name is called an anonymous function. A function expression is often stored in a variable in order to refer to it.

ES6 introduced arrow function syntax, a shorter way to write functions by using the special “fat arrow” () => notation.

Arrow functions remove the need to type out the keyword function every time you need to create a function. 
Instead, you first include the parameters inside the ( ) and then add an arrow => that points to the function body surrounded in { } like this:

JavaScript also provides several ways to refactor arrow function syntax.
These expressions are a clean and concise alternative to the traditional function syntax. 
eg: const plantNeedsWater = day => day === 'Wednesday' ? true : false;



